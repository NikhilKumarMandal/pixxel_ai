// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TrainingStatus {
  starting
  processing
  succeeded
  failed
  canceled
}

enum Genders {
  man
  women
}

model User {
  id    String  @id
  email String  @unique
  name  String?

  credits     Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images        Image[]
  projects      Project[]
  purchases Purchase[] 
}

model Project {
  id     String @id @default(uuid())
  fileId String
  url    String
  width  Int
  height Int

  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Image {
  id     String @id @default(uuid())
  url    String
  fileId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model Purchase {
  id        Int      @id @default(autoincrement())

  variantId Int
  variant   Variant  @relation(fields: [variantId], references: [id])

  tokensGranted Int

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

model Product {
  id          Int       @id @default(autoincrement())
  productId   Int       @unique
  name        String
  description String?
  media       String[]  @db.Text
  variants    Variant[]
}

model Variant {
  id                 Int     @id @default(autoincrement())
  variantId          Int     @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  purchases Purchase[]
}